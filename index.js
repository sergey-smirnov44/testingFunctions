// 'use strict'
/*******************************************************************
 *
 *           –ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞ –≤—Ö–æ–¥ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
 *           –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª —ç—Ç–æ–≥–æ —á–∏—Å–ª–∞.
 *
 *           –§–∞–∫—Ç–æ—Ä–∏–∞–ª —á–∏—Å–ª–∞ ‚Äî —ç—Ç–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª
 *           –æ—Ç 1 –¥–æ —Å–∞–º–æ–≥–æ —á–∏—Å–ª–∞ (–≤–∫–ª—é—á–∞—è –¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ).
 *           –û–±–æ–∑–Ω–∞—á–∞–µ—Ç—Å—è —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –∑–Ω–∞–∫–æ–º ¬´!¬ª.
 *
 *                   6! = 1 ¬∑ 2 ¬∑ 3 ¬∑ 4 ¬∑ 5 ¬∑ 6 = 720
 *
 *******************************************************************/
function factorial(num) {
    if (typeof num !== 'number') return "–û—à–∏–±–∫–∞, –≤—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ"
    let result = 1;

    if (isNaN(num)) {
        return "Error"
    } else {
        for (let i = 1; i <= num; i++) {
            result *= i
        }
    }
    return result
}
/*
console.log("1 –∑–∞–¥–∞—á–∞. –§–∞–∫—Ç–æ—Ä–∏–∞–ª –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞" + " " + factorial(6))
// console.log(720)
*/

/*******************************************************************
 *
 *         –ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞ –≤—Ö–æ–¥ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É
 *         –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–ª–∏–Ω—É —Å–∞–º–æ–≥–æ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –≤ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–µ.
 *
 *******************************************************************/

/*str = "dsghdfgjkhds asdf asdfsa asdfasdfasdfsdfgh asdfasdfasgd d124234313452435khdsfaASa dsghdfgjkhdSADFADSsfs"

function longestString(str) {
    str = str.split(' ')
    let longest = '';
    for (let i = 0; i < str.length; i++) {
        if (str[i].length > longest.length) {
            longest = str[i]
        }
    }
    return "–°–∞–º–æ–µ –¥–ª–∏–Ω–Ω–æ–µ —Å–ª–æ–≤–æ '" + longest + "', " + "–∏–º–µ—é—â–µ–µ –∫–æ–ª-–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ '" + longest.length + "'"
}*/

/*
console.log(longestString(str))
*/

/*******************************************************************
 *
 *          –ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞ –≤—Ö–æ–¥ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤,
 *          —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ –º–∞—Å—Å–∏–≤–æ–≤ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª
 *          (–Ω–∞–ø—Ä–∏–º–µ—Ä: [[1, 2, 3], [4, 5], [6, 7, 8, 9]])
 *          –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑
 *          –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ —á–∏—Å–ª–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–¥–º–∞—Å—Å–∏–≤–∞.
 *
 *******************************************************************/

/*
primaryArr = [[1, 2, 3], [4, 5], [6, 7, 8, 9], [11,22,33,44,55]]

function newMaxArrayFromSubArrays() {
    let newArray = [];
    for (let i = 0; i < primaryArr.length; i++) {
            for(let j=0; j< primaryArr[i].length; j++) {
                newArray.push(primaryArr[i][j])
            }
    }
    console.log(newArray)
}
console.log()  // [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, 44, 55]

newMaxArrayFromSubArrays()
*/

primaryArr = [[1, 2, 3], [4, 5], [6, 7, 8, 9], [11, 22, 33, 44, 55]]

/*function newMaxArrayFromSubArrays(arr) {
    let newArray = [];
    for (let i = 0; i < arr.length; i++) {
        let biggest = 0;
        for (let j = 0; j < arr[i].length; j++) {
            if (arr[i][j] > biggest) {
                biggest = arr[i][j]
            }
        }
        newArray.push(biggest)
    }
    return newArray
}*/

/*
console.log(newMaxArrayFromSubArrays([[1, 2, 3], [4, 5], [6, 7, 8, 9], [11,22,33,44,55]]))
*/
/************** –§—É–Ω–∫—Ü–∏—è –æ—Ç—Ä–µ–∑–∞–µ—Ç —Å –∫–æ–Ω—Ü–∞  –∫–æ–ª-–≤–æ —Å–∏–º–≤–æ–ª–æ–≤, –∑–∞–¥–∞–Ω–Ω–æ–µ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–µ "num" *****************/

/*function cutString(str, num) {
    str = str.split('') // —Å—Ç—Ä–æ–∫—É –≤ –º–∞—Å—Å–∏–≤
    let cutChar
    for (let i = 0; i < num; i++) {
        cutChar = str.pop()
    }
    let resultString = str.join('') // –º–∞—Å—Å–∏–≤ –≤ —Å—Ç—Ä–æ–∫—É

    return resultString
}*/

/*
console.log(cutString("–†–∞–∫–µ—Ç–∞", 2))
*/
/*******************************************************************
 *
 *         –ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞ –≤—Ö–æ–¥ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É
 *         –∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –∏ –æ–±—Ä–µ–∑–∞–µ—Ç —Å—Ç—Ä–æ–∫—É(–ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç), –µ—Å–ª–∏
 *         –æ–Ω–∞ –¥–ª–∏–Ω–Ω–µ–µ –∑–∞–¥–∞–Ω–Ω–æ–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã —Å—Ç—Ä–æ–∫–∏ (–≤—Ç–æ—Ä–æ–π
 *         –∞—Ä–≥—É–º–µ–Ω—Ç) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–µ–∑–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É —Å ¬´‚Ä¶¬ª –≤ –∫–æ–Ω—Ü–µ.
 *
 *******************************************************************/
/*function specificLengthofString(str, maxLength) {
    if (str.length > maxLength) {

        str = str.split('') // —Å—Ç—Ä–æ–∫—É –≤ –º–∞—Å—Å–∏–≤
        let remainder = Math.abs(maxLength - str.length);
        let cutChar

        for (let i = 0; i < remainder; i++) {
            cutChar = str.pop()
        }
        let resultString = str.join('') // –º–∞—Å—Å–∏–≤ –≤ —Å—Ç—Ä–æ–∫—É
        return resultString + "..."
    } else {
        return "–î–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ —Å–∏–º–≤–æ–ª–æ–≤"
    }
}*/

/*
console.log(specificLengthofString("–†–∞–∑–¥–µ–ª—è–π –∏ –≤–ª–∞—Å—Ç–≤—É–π", 8))
*/

/*******************************************************************
 *
 *
 *      –ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞ –≤—Ö–æ–¥ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É
 *      –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç—Ç—É —Å—Ç—Ä–æ–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ
 *      –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ.
 *
 *
 *******************************************************************/

/*function changeFirstCharToUppareCase(primaryString) {
    primaryString = primaryString.split('')
    let firstChar, result

    for (let i = 0; i < primaryString.length; i++) {
        if (primaryString[i] === ' ') {
            primaryString[i + 1] = primaryString[i + 1].toUpperCase()

        }

    }
    firstChar = primaryString[0].toUpperCase()

    primaryString.shift() // —É–¥–∞–ª–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤–∞
    primaryString.unshift(firstChar)
    result = primaryString.join('')

    return result
}*/

/*
console.log(changeFirstCharToUppareCase("i mega master senior front-end and i know javascript better than anyone"))
*/

/*******************************************************************
 *
 *
 *     –ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞ –≤—Ö–æ–¥ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ –º–∞—Å—Å–∏–≤–∞
 *     –∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ n. –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç
 *     –ø–µ—Ä–≤–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ –≤–æ –≤—Ç–æ—Ä–æ–π –ø–æ –ø–æ—Ä—è–¥–∫—É –Ω–∞—á–∏–Ω–∞—è —Å –∏–Ω–¥–µ–∫—Å–∞ n
 *     –≤—Ç–æ—Ä–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ –∏ –≤–µ—Ä–Ω—É—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤.
 *     –í—Ö–æ–¥–Ω—ã–µ –º–∞—Å—Å–∏–≤—ã –Ω–µ –¥–æ–ª–∂–Ω—ã –∏–∑–º–µ–Ω—è—Ç—å—Å—è. (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ø—Ä–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 *     ([1, 2, 3], [4, 5], 1) –¥–æ–ª–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è [4, 1, 2, 3, 5].
 *
 *
 *******************************************************************/
arr1 = [1, 2, 3, 4, 5, 'üêë']
arr2 = [66, 77, 88, 99, 'üê∫']
idx = 5

/*function copyArrayByIndex(arr1, arr2, idx) {
    finalArray = []
    // const index = arr1.findIndex(4);
    // console.log(index)

    for (let i = 0; i < arr2.length; i++) {
        // console.log(arr2[i])
    }

    // console.log(arr1)
    // console.log(arra)

    // const finalArray = arr2.concat(arr1)

    const cloneArr1 = arr1.slice()


    var array = [2, 5, 9];
    array.indexOf(2);     // 0

    // console.log(arr1)


    // return finalArray
}*/

/*
console.log(copyArrayByIndex(arr1, arr2, idx))
*/

/*******************************************************************
 *
 *     –ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞ –≤—Ö–æ–¥ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤
 *     –∏ —É–¥–∞–ª—è–µ—Ç –≤ –Ω–µ–º –≤—Å–µ "–ª–æ–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è"
 *
 *     (—É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
 *
 *******************************************************************/

/*function deleteFalsy(arr) {
    arr = [false, 0, 0n, '', "", ``, null, undefined, NaN]
    const arr2 = [null, 1, 0, 'string', 2n, undefined, true, {name: "Andrew"}, false, '', ' ', NaN]

    const filteredArray = arr2.filter(i => !arr.includes(i));


    return filteredArray
}*/

/*
console.log(deleteFalsy([null, 1, 0, 'string', 2n, undefined, true, {name: "Andrew"}, false, '', ' ', NaN]))
*/
/*******************************************************************
 *
 *    –ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞ –≤—Ö–æ–¥ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤,
 *    —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ –¥–≤—É—Ö —Å—Ç—Ä–æ–∫. –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å true,
 *    –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤ –ø–µ—Ä–≤–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ –º–∞—Å—Å–∏–≤–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ
 *    –±—É–∫–≤—ã —Å—Ç—Ä–æ–∫–∏ –≤–æ –≤—Ç–æ—Ä–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ –º–∞—Å—Å–∏–≤–∞ (—Ä–µ–≥–∏—Å—Ç—Ä –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è).
 *
 *******************************************************************/

/*function identicalString([str1, str2]) {
    const arr = [str1, str2]

    let testString1 = str1.toLowerCase().split('');
    let testString2 = str2.toLowerCase().split('');


    let filtered;

    const unnecessaryElements = [' '] // –∏–∑–±–∞–≤–∏–º—Å—è –æ—Ç –ª–∏—à–Ω–∏—Ö –∑–Ω–∞–∫–æ–≤, –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ, –ø—Ä–æ–±–µ–ª–∞
    testString1 = testString1.filter(i => !unnecessaryElements.includes(i));
    testString2 = testString2.filter(i => !unnecessaryElements.includes(i));

    if (arr[0].length > arr[1].length) {
        return false + ", —Ç–∞–∫ –∫–∞–∫ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –±–æ–ª—å—à–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —á–µ–º –≤–æ –≤—Ç–æ—Ä–æ–π"
    }

    let reps = ''
    for (let i = 0; i < testString1.length; i++) {
        filtered = testString2.indexOf(testString1[i])
        if (filtered == -1) {
            return false + ", —Ç–∞–∫ –∫–∞–∫ –≤ –≤–∞—à–µ–π —Å—Ç—Ä–æ–∫–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è —Å–∏–º–≤–æ–ª, –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≤ –¥—Ä—É–≥–æ–π —Å—Ç—Ä–æ–∫–µ"
        } else

            return true
    }

}*/

/*
    console.log((identicalString(['aqerwa', 'bqwweaar'])))
*/

/*******************************************************************
 *
 *
 * –ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞ –≤—Ö–æ–¥ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å—Å–∏–≤ –∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.
 * –§—É–Ω–∫—Ü–∏—è–¥–æ–ª–∂–Ω–∞ —Ä–∞–∑–±–∏—Ç—å –º–∞—Å—Å–∏–≤ (–ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç) –Ω–∞ –≥—Ä—É–ø–ø—ã –¥–ª–∏–Ω–æ–π size
 * (–≤—Ç–æ—Ä–æ–π –∞–≥—Ä—É–º–µ–Ω—Ç) –∏ –≤–µ—Ä–Ω—É—Ç—å –∏—Ö –≤ –≤–∏–¥–µ –¥–≤—É–º–µ—Ä–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞.
 *
 *
 *******************************************************************/


/*function cutToArrayOfSize(arr, size) {
    let newArray = arr
    let partsArray = arr.length / size;
    // console.log(partsArray)


    return newArray

}*/

/*
console.log(cutToArrayOfSize([1,2,3,4,5,6,7,8,9,0], 2))
*/


/*******************************************************************
 *
 *
 *        –ù–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é —Ñ—É–Ω–∫—Ü–∏–π: map, filter, find, some, every.
 *
 *
 *******************************************************************/

//  // ForEach
// //arr.forEach(callback(currentValue[, index[, array]]) {
// //   // execute something
// // }[, thisArg]);
//
// let arr = [10, 11, 12, 13, , , , , , , , , , 14, 15, 61, 17, 18]


/*let arrForFilter = [{1: 1}, 1, 2, 3, 4, , , , , 6, , 7, 8,]

Array.prototype.forEachMy = function (callback, thisArg) {
    if (this == null) {
        throw new Error('Cant iterate is over null or undefined')
    }
    let context = this
    let obj = Object(this)
    let objLength = obj.length;
    let i = 0;

    if (arguments > 1) {
        context = thisArg
    }

    if (typeof callback !== 'function') {
        throw new Error('Callback is not a function')
    }

    while (i < objLength) {
        if (i in obj) {
            callback.call(context, this[i], i, obj)
        }
        i++;
    }
}*/

// arr.forEachMy((item, index, array) => {
//     console.log({item, index})
// })


// Filter

// filter
//arr.filter(callback(currentValue[, index[, array]]) {
//   // execute something
// }[, thisArg]);

 let arrayForSomeFunction = [1, 2, 3, 4, 5, 6, 7];

function isPrime(num) {
    if (num <= 1) return false;
    else if (num === 2) return true;
    else {
        for (let i = 2; i < num; i++)
            if (num % i === 0) {
                return false
            }
        return true
    }
}
// function to find prime numbers

Array.prototype.filterMy = function (callback, thisArg) {
    const result = []
    if (this === null) {
        throw new Error('Cant iterate is over undefined or null')
    }
    if (typeof callback !== 'function') {
        throw new Error('Callback is not a function')
    }
    let context = this;
    let obj = Object(this)
    let objLength = obj.length;
    if (arguments.length > 1) {
        context = thisArg
    }
    for (let i = 0; i < objLength; i++) {
        if (i in obj) {
            let current = this[i]
            if (callback.call(context, current, i, obj)) {
                result.push(current)
            }
        }
    }
    return result
}
/*
let filtered = array.filterMy(isPrime)
console.log(filtered)
*/

function filterMy  (callback, thisArg) {
    const result = []
    if (this === null) {
        throw new Error('Cant iterate is over undefined or null')
    }
    if (typeof callback !== 'function') {
        throw new Error('Callback is not a function')
    }
    let context = this;
    let obj = Object(this)
    let objLength = obj.length;
    if (arguments.length > 1) {
        context = thisArg
    }
    for (let i = 0; i < objLength; i++) {
        if (i in obj) {
            let current = this[i]
            if (callback.call(context, current, i, obj)) {
                result.push(current)
            }
        }
    }
    return result
}

// map()
//
// let newArray = arr.map(callback(currentValue[, index[, array]]) {
//     // return element for newArray, after executing something
// }[, thisArg]);

/*Array.prototype.mapMy = function (callback, thisArg) {
    if (this == null) {
        throw new Error('Cant iterate is over undefined or null')
    }
    let context = this;
    let obj = Object(this);
    if (arguments.length > 1) {
        context = thisArg
    }
    if (typeof callback !== 'function') {
        throw new Error('Callback is not a function')
    }

    let len = obj.length;
    let newArray = [];
    let i = 0; // idx

    while (i < len) {
        if (i in obj) {
            newArray[i] = callback.call(context, this[i], i, obj)
        }
        i++
    }
    return newArray
}*/
/*

console.log(array.mapMy((item) => item * 7))

*/

function  mapMy  (callback, thisArg) {
    if (this == null) {
        throw new Error('Cant iterate is over undefined or null')
    }
    let context = this;
    let obj = Object(this);
    if (arguments.length > 1) {
        context = thisArg
    }
    if (typeof callback !== 'function') {
        throw new Error('Callback is not a function')
    }

    let len = obj.length;
    let newArray = [];
    let i = 0; // idx

    while (i < len) {
        if (i in obj) {
            newArray[i] = callback.call(context, this[i], i, obj)
        }
        i++
    }
    return newArray
}


Array.prototype.findMy = function (callback, thisArg) {
    if (this == null) {
        throw new Error('Cant iterate is over undefined or null')
    }
    if (typeof callback !== 'function') {
        throw new Error('Callback is not a function')
    }

    let obj = Object(this)
    let context = this
    let lengthObj = obj.length;
    let i = 0

    if (arguments > 1) {
        context = thisArg
    }
    let firstElement = [];
    while (i < obj.length) {
        if (i in obj) {
            if (callback.call(context, this[i], i, obj)) {
                firstElement.push(this[i])
            }
        }
        i++
    }
    return firstElement[0];
}
/*
console.log(array.findMy(isPrime))
*/

function findMy  (callback, thisArg) {
    if (this == null) {
        throw new Error('Cant iterate is over undefined or null')
    }
    if (typeof callback !== 'function') {
        throw new Error('Callback is not a function')
    }

    let obj = Object(this)
    let context = this
    let lengthObj = obj.length;
    let i = 0

    if (arguments > 1) {
        context = thisArg
    }
    let firstElement = [];
    while (i < obj.length) {
        if (i in obj) {
            if (callback.call(context, this[i], i, obj)) {
                firstElement.push(this[i])
            }
        }
        i++
    }
    return firstElement[0];
}

/*Array.prototype.someMy =  function (callback, thisArg) {
    if (this == null) {
        throw new Error('Cant iterate is over undefined or null')
    }
    if (typeof callback !== 'function') {
        throw new Error('Callback is not a function')
    }
    let obj = Object(this)

    let context = this
    let i = 0
    if (arguments > 1) {
        context = thisArg
    }

    while (i < obj.length) {
        if (i in obj) {
            if (callback.call(context, this[i], i, obj)) {
                return true
            }
        }
        i++
    }
    return false
}*/

function someMy (callback, thisArg) {
    if (this == null) {
        throw new Error('Cant iterate is over undefined or null')
    }
    if (typeof callback !== 'function') {
        throw new Error('Callback is not a function')
    }
    let obj = Object(this)

    let context = this
    let i = 0
    if (arguments > 1) {
        context = thisArg
    }

    while (i < obj.length) {
        if (i in obj) {
            if (callback.call(context, this[i], i, obj)) {
                return true
            }
        }
        i++
    }
    return false
}
someMy(isLess10)

function isLess10(elem) {
    return elem < 10
}

// console.log(array.someMy(isLess10))

/*Array.prototype.everyMy = function (callback, thisArg) {
    if (this == null) {
        throw new Error('Cant iterate is over undefined or null')
    }
    if (typeof callback !== 'function') {
        throw new Error('Callback is not a function')
    }
    let obj = Object(this)

    let context = this
    let i = 0
    if (arguments > 1) {
        context = thisArg
    }

    let allElem = []

    while (i < obj.length) {

        if (i in obj) {
            if (callback.call(context, this[i], i, obj)) {
                allElem.push(this[i])
            } else return false
        }
        i++
    }
    return true
}*/
/*
console.log(array.everyMy(isLess10))
*/

function everyMy  (callback, thisArg) {
    if (this == null) {
        throw new Error('Cant iterate is over undefined or null')
    }
    if (typeof callback !== 'function') {
        throw new Error('Callback is not a function')
    }
    let obj = Object(this)

    let context = this
    let i = 0
    if (arguments > 1) {
        context = thisArg
    }

    let allElem = []

    while (i < obj.length) {

        if (i in obj) {
            if (callback.call(context, this[i], i, obj)) {
                allElem.push(this[i])
            } else return false
        }
        i++
    }
    return true
}

module.exports = Array; // –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—Ç–æ—Ç–∏–ø–æ–≤ (–≤ –º–æ–µ–º —Å–ª—É—á–∞–µ, –ø–æ–ª–∏—Ñ–∏–ª–æ–≤)
module.exports = isPrime
module.exports = isLess10
module.exports = factorial
// module.exports = isNaN


